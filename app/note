
/**
 * openGL 2.0 渲染管线
 * Api-->基本处理-->顶点着色器-->图元装饰-->光栅化——>片元着色器-->
 * 剪裁测试--->深度测试--->颜色缓冲混合-->抖动--->帧缓冲
 *
 *  Note:插值：用来填充图像变换时像素之间的空隙。https://baike.baidu.com/item/%E6%8F%92%E5%80%BC/1196063?fr=aladdin
 * <p>
 *
 * A:基本处理
 * 设定3D 物体的顶点坐标 顶点颜色 顶点纹理 坐标等属性 指定绘制方式  点绘制 线段绘制 或者三角形 绘制
 *
 * B:顶点缓冲对象
 * 可选的 对于某些顶点基本不变的情况，在初始化阶段就可以把顶点数据传入 省去了每次都传入顶点消耗性能
 *
 * C:顶点着色器
 *  1.是一个可编程的处理单元，可以执行顶点的变换，光照 材质的应用于计算的相关操作 ，每个顶点执行一次
 *  2.将顶点几何信息以及其它属性传入顶点着色器--处理后-->产生纹理坐标，颜色，点 位置，等各种顶点属性--传给->图元装配阶段。
 *  3，着色器的工作原理
 *      顶点着色器的 输入：主要为待处理顶点相应的attribute(属性)变量，uniform(一致)变量，采样器以及临时变量，
 *                 输出：顶点着色器处理后生成的varying变量以及一些内建输出变量
 *
 *                 attribute0       uniform  采样器        varying0
 *                 attribute1          ↓       ↓          varying1
 *                 attribute2 ---> 顶 点 着 色 器 -------> varying2
 *                 attribute3            ↕                varying3
 *                 attribute4        临时变量              varying4
 *                                           gl_Position
 *                                           gl_FrontFacing
 *                                           gl_PointSize
 *
 *               1，attribute变量 。3D物体中顶点 位置，颜色 ，法向量 等每个顶点信息 都是以attribute 传入顶点着色器的
 *                2，uniform 变量 。 同一组顶点组成的3D物体中 各个顶点相同的信息，一般为 光源位置，当前摄像机 位置，投影系列举证
 *                3，varying变量 。 （易变变量）是从顶点着色器中计算产生的 并传递给图元装配变量。顶点着色器可以使用varying来传递
 *                                 需要插值到片元的颜色，法向量，纹理坐标等
 *                4，gl_Position,gl_FrontFacint,gl_PointSize 等 内建输出变量
 *                   1，gl_Position是经过 变换矩阵·变换·投影 后的最终位置
 *                   2，gl_FrontFacing指的是片元所在面的朝向
 *                   3，gl_Position 是指的是点的大小
 *
 *               Note：varying 变量在顶点着色器赋值后“并不是”直接传入给片元着色器，而是在“光栅化”阶段由“管线”
 *                              根据片元所属图元各个顶点对应的顶点着色器 根据次变量的赋值情况及片元和各顶点的
 *                              位置关系产生插值 。
 *                              △ 根据各个定点的颜色 和位置关系 产生的 插值数据  传入了图元装饰
 *
 * D:图元装饰
 *    1，图元组装
 *            顶点数据根据设置的绘制方式组成完整的图元。
 *            例如：点的绘制方式下每个图元仅需要一个顶点 顶点既是图元，线段绘制方式两个顶点绘制一个图元。
 *    2，图元处理
 *           最重要图元裁剪，消除位于半空间之外的部分（无法绘制 看不到的部分or超出可绘制局域）
 *           裁剪平面 裁剪后需要增加新的顶点。
 *
 *           因为随着观察 位置·角度 的不同并不能总看到3D物体某个图元的全部
 *           例如，观察一个四面体 当距离一个三角形面很近时 可能只能看到此面的一部分，这时在屏幕上显示的就不是
 *           三角形了。而是经过裁剪形成的多边形。
 *
 *           若图元完全位于实景体及自定义裁剪平面内部，侧传给后续步骤继续处理。若完全位于外部侧丢弃，
 *           若有一部分位于外部侧需要裁剪
 *
 *           视景体：对于平行投影来说，视景体是一个四边平行于投影方向，长度无限的四棱柱；对于透视投影来说，则是以投影中心为顶点的四棱锥。
 *                  视景体是指成像景物所在空间的集合。它是一个空间集合体。视景体是计算机图形学中的一个重要概念。
 *                  投影变换的目的就是定义一个视景体，使得视景体外多余的部分裁剪掉，最终图像只是视景体内的有关部分。
 *
 *E.光栅化
 *     虽然虚拟3D世界中的几何信息是三维的，但是需要在二维平面的屏幕上展示。
 *   因此在执行真正的光栅化之前，首先需要将3D 物体投影到平面上。需要注意的是，
 *   由于观察位置的不同，同一个3D场景中
 *   物体投影到视平面可能会产生不同的效果。
 *
 *     另外，3D世界当中物体的几何信息都是连续的数量表示，因此投影的平面结果也是用连续的数量表示
 *   当目前设备的屏幕都是离散化的（一个一个像素组成），因此也需要将投影结果离散化，将其分解成一个个
 *   独立的小单元，这些小单元就成为片元（其实就是一个个的像素，因为投影结果可能导致远近平面占用同一个像素
 *   远点的像素会被覆盖所以叫片元）。
 *     Note,每个片元都包含顶点的 颜色，坐标，纹理坐标等信息，这些都是系统根据在投影前，根据此片元的位置
 *    以及片元个顶点信息进行插值计算得到的。
 *
 * F.片元着色器
 *    可以执行纹理的采样，颜色的汇总，计算雾颜色等操作。每片 片元执行一次，通过重复的执行，
 *   将3D物体光栅化后产生的每个片元的颜色等属性计算出来传入后续步骤。
 *
 *                 varying0       uniform  采样器
 *                 varying1          ↓       ↓
 *                 varying2 ---> 片元 着 色 器 -------> gl_fragColor
 *                 varying3            ↕
 *                 varying4        临时变量
 *                          gl_Position
 *                          gl_FrontFacing
 *                          gl_PointSize
 *
 *     1,varying 指的是顶点着色器后 光栅化阶段 根据顶点颜色位置，和片元位置通过插值计算得到的易变变量。
 *     2,gl_fragColor 指的是在片元着色器后最终确定的颜色，一般片元着色器最后都会为gl_fragColor赋值。
 *
 *     Note:片元着色器每片执行一次，顶点着色器每个顶点执行一次。尽量不要在片元着色器中执行大数量的计算。
 *
 * G，裁剪测试
 *     如果开启了裁剪测试，Opengl 会检测每个片元在缓冲帧的位置，若对应的位置在裁剪窗口内侧将此片元传入
 *     下一个阶段 否侧删除。
 *
 * H.深度测试和模板测试
 *   1，深度测试
 *             是指将输入的片元与帧缓冲中对应的片元位置的片元进行深度值比较如果小于缓冲值
 *             侧送入下一个阶段覆盖缓冲片元或者与其融合。否侧丢弃改输入片元。
 *   2. 模板测试
 *             一般是将绘制区域限制在一定的范围内，一般用在湖面倒影，镜像等场合。
 *
 * I.颜色缓冲混合
 *    若程序开启了Alpha混合，测根据混合因子将输入的片元与帧缓冲的片元进行Alpha融合，否侧直接覆盖。
 *
 * J.抖动
 *      是使用少量的颜色模拟出更多的颜色，但是会损失分辨力，目前设备的颜色已经和丰富了，基本用不到抖动
 *     api 中调用可能并不会有实际哦作用。
 *
 * K.帧缓冲
 *     opengGL的绘制并不是直接在屏幕上绘制的，而是在缓冲帧绘制完一帧后在展示到屏幕上，所以每次绘制钱yao
 *   清空缓冲区，否侧会造成绘制错误的结果
 *
 *   帧缓冲是有一套组件构成，颜色缓冲·深度缓冲·模板缓冲。
 *   1，颜色缓冲 用于缓冲片元的rgba值
 *   2，深度缓冲 用来存储每个片元的深度值，深度值指观察点（相机位置）到每个片元的距离，新的片元如果深度值
 *     小于缓冲值才会放入缓冲或者混合否侧被丢弃
 *   3,模板缓冲 存储每个片元的模板值，工模板测试用
 *
 *
 *  openGL3.0 渲染管线新特性
 *          整体与2.0内容相同，主要更新在顶点着色器与片元着色器
 *
 *          1，顶点着色器
 *             与2.0相同 执行顶点的变换，光照，材质的应用，与计算等顶点的相关操作
 *             每顶点执行一次 。
 *             工作过程 将原始的顶点几何信息以及其它属性传送到自己开发顶点着色器中---产生-
 *             -->纹理坐标，颜色，点的位置等属性信息，然后传给图元装配阶段
 *
 *                 in       uniform  采样器        out
 *                 in          ↓       ↓          out
 *                 in ---> 顶 点 着 色 器 -------> out
 *                 in            ↕                out
 *                 in        临时变量              out
 *                                           gl_Position
 *                                           gl_PointSize
 *                                           gl_VertexId
 *                                           gl_InstanceID
 *
 *             1，顶点着色器的输入主要为待处理的顶点响应的 in, uniform  临时变量 采样器，
 *                输出经过着色器生成out 变量和内建变量。
 *             2，in 变量。顶点的各个信息的修饰 位置 颜色 方向量的等属性
 *             3，uniform变量，修饰是 顶点中不变的属性，各个顶点相同的属性,摄像机位置 投影矩阵 等
 *             4，out 顶点着色器计算产生并传递给图元装配阶段的变量。out 可以传递插值或者不需要插值的数据
 *                颜色 方向量，纹理坐标 等任意值。
 *             5.内建输出 输入变量
 *                输入：gl_VertexID 记录顶点的证书索引
 *                      gl_InstanceID 指实例id只在顶点着色器中使用
 *                                     对于指定的每组图元，改ID响应递增、
 *              Note:out变量在顶点着色器赋值后并不会直接传入片元着色器的in 变量中。存在两种情况。
 *
 *              1，如果out限定符之前含有smooth限定符或者没有任何限定符。在光栅化阶段由管线，根据
 *                 该片元所在图元的各顶点对应的顶点着色器对此out变量赋值情况及片元与各个顶点关系产生
 *                 的插值产生 传入 片元着色器in变量的值。
 *              2，如果out 变量前有flat限定符，测传递到片元着色器的in变量的值 不是在光栅化阶段片元的
 *                 插值赋值的，是用该图元的最后一个顶点的顶点着色器对此out变量的赋值决定
 *   2片元着色器
 *       与2.0不同的是 变量varing-变成-in  内建gl_fragColor不存在了，用自己声明的out变量替代了、
 *
 *
 *                 in0       uniform  采样器
 *                 in1          ↓       ↓
 *                 in2---> 片元 着 色 器 -------> out vec4
 *                 in3            ↕
 *                 in4       临时变量   gl_FragDepth
 *                                      gl_FrontFacing
 *                                      gl_FragCoord
 *                                      gl_PointCoord
 *        1,in 从顶点着色器传入的变量值
 *        2,out 变量，有片元着色器计算完成的片元颜色值的变量，一般在片元着色器的最后，需要对其赋值
 *               最后将其送入渲染管线的后继阶段进行处理
 *
 */
